{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-auth.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(httpclient, userAuthService) {\n      this.httpclient = httpclient;\n      this.userAuthService = userAuthService;\n      this.PATH_OF_API = 'http://localhost:8754';\n      this.requestHeader = new HttpHeaders({\n        'No-Auth': 'True'\n      });\n    }\n\n    login(loginData) {\n      return this.httpclient.post(this.PATH_OF_API + '/authenticate', loginData, {\n        headers: this.requestHeader\n      });\n    }\n\n    roleMatch(allowedRoles) {\n      let isMatch = false;\n      const userRoles = this.userAuthService.getRoles();\n\n      if (userRoles != null && userRoles) {\n        for (let i = 0; i < userRoles.length; i++) {\n          for (let j = 0; j < allowedRoles.length; j++) {\n            if (userRoles[i].nomRole === allowedRoles[j]) {\n              isMatch = true;\n            }\n          }\n        }\n      }\n\n      return isMatch;\n    }\n\n    getUsersList() {\n      return this.httpclient.get(this.PATH_OF_API + '/users');\n    }\n\n    getUserByFirstAndLastNameAndId(id) {\n      const url = `${this.PATH_OF_API}/firstandlastnameandid/${id}`;\n      return this.httpclient.get(url);\n    }\n\n    createUser(user) {\n      return this.httpclient.post(this.PATH_OF_API + '/users', user);\n    }\n\n    updateUser(id, user) {\n      return this.httpclient.put(this.PATH_OF_API + '/users' + `/${id}`, user);\n    }\n\n    getUserById(id) {\n      return this.httpclient.get(this.PATH_OF_API + '/users' + `/${id}`);\n    }\n\n    deleteUser(id) {\n      return this.httpclient.delete(this.PATH_OF_API + '/users' + `/${id}`);\n    }\n\n    signup(loginData) {\n      return this.httpclient.post(this.PATH_OF_API + '/registration/signup', loginData, {\n        headers: this.requestHeader\n      });\n    }\n\n    confirmToken(token) {\n      const url = `${this.PATH_OF_API}/registration/confirm`;\n      const params = new HttpParams().set('token', token);\n      return this.httpclient.get(url, {\n        params\n      });\n    }\n\n    forgotPassword(email) {\n      const url = `${this.PATH_OF_API}/users/forgot-password`;\n      const body = new HttpParams().set('email', email);\n      return this.httpclient.post(url, body);\n    }\n\n    resetPassword(token, password) {\n      const url = `${this.PATH_OF_API}/users/reset-password`;\n      const body = new HttpParams().set('token', token).set('password', password);\n      return this.httpclient.post(url, body);\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}